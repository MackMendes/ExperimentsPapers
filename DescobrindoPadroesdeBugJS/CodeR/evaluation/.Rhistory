tes <- db[ which(db$METHOD.METHOD_CALL.INSERTED.global.reduceRight == 1), ]
View(tes)
rowsByAttr <- c("METHOD.METHOD_CALL.INSERTED.global.reduceRight", db[ which(db$METHOD.METHOD_CALL.INSERTED.global.reduceRight == 1), ])
?dbscan
??optics
??#kmeans
datasetBugId <- read.csv(file="C:/Users/Charles/Desktop/Mestrado USP/Dissertação e Projeto/Experimentos/Experimentos - Discovering Bug Patterns In JS/DataSet/dataset_bugid.csv", header=TRUE, sep=",")
#====
data("multishapes", package = "factoextra")
db <- datasetBugId[10:669]
library("dbscan")
res.db <- dbscan::dbscan(db, 0.30, 5)
# Obter os clusters
datasetBugId$Cluster <- res.db$cluster
datasetBugId$Qtd = 1;
?dbscan
dt <- data.table(datasetBugId)
result <- dt[, sum(Qtd), by = Cluster]
result <- dt %>% group_by(Cluster, nome_coluna) %>% summarise(V1 = sum(Qtd))
library(data.table)
dt <- data.table(datasetBugId)
result <- dt[, sum(Qtd), by = Cluster]
result <- dt %>% group_by(Cluster, nome_coluna) %>% summarise(V1 = sum(Qtd))
result <- result[order(-V1)]
View(result)
metadados <- c("ID", "ProjectID", "CommitURL", "BuggyCommitID", "BugFixingCommit",
"RepairedCommitID", "Class", "Method", "ModifiedStatementCount",
"Cluster", "Qtd")
colunas <- colnames(dt)
colunas[!colunas %in% metadados]
teste <- tidyr::gather(dt, "nome_coluna", "valor_coluna", colunas[!colunas %in% metadados])
teste_result <- teste[teste$valor_coluna == 1,]
teste_result <- teste
teste_result_final <- teste_result[teste_result$Cluster != 0, ]
library(dplyr)
teste_result_final <- teste_result_final %>% group_by(Cluster, nome_coluna) %>% summarise(V1 = sum(Qtd))
teste_result_final <- teste_result_final[order(-teste_result_final$V1),]
teste_result_final <- teste_result_final[teste_result_final$Cluster != 0, ]
metadados <- c("ID", "ProjectID", "CommitURL", "BuggyCommitID", "BugFixingCommit",
"RepairedCommitID", "Class", "Method", "ModifiedStatementCount",
"Cluster", "Qtd")
colunas <- colnames(dt)
colunas[!colunas %in% metadados]
teste <- tidyr::gather(dt, "nome_coluna", "valor_coluna", colunas[!colunas %in% metadados])
install.packages("tidyr")
teste <- tidyr::gather(dt, "nome_coluna", "valor_coluna", colunas[!colunas %in% metadados])
teste_result <- teste[teste$valor_coluna == 1,]
teste_result <- teste
teste_result_final <- teste_result[teste_result$Cluster != 0, ]
library(dplyr)
teste_result_final <- teste_result_final %>% group_by(Cluster, nome_coluna) %>% summarise(V1 = sum(Qtd))
teste_result_final <- teste_result_final[order(-teste_result_final$V1),]
teste_result_final <- teste_result_final[teste_result_final$Cluster != 0, ]
teste <- tidyr::gather(dt, "nome_coluna", "valor_coluna", colunas[!colunas %in% metadados])
install.packages("rlang")
teste <- tidyr::gather(dt, "nome_coluna", "valor_coluna", colunas[!colunas %in% metadados])
library(rlang)
library("rlang")
library("tidyr")
library("rlang")
teste <- tidyr::gather(dt, "nome_coluna", "valor_coluna", colunas[!colunas %in% metadados])
res.db <- dbscan::dbscan(db, eps=0.30, minPts = 5, weights=0.2)
res.db <- dbscan::dbscan(db, eps=0.30, minPts = 5, weights=2)
install.packages('tidyr', clean = TRUE)
install.packages('tidyr', dependencies = TRUE)
install.packages('rlang', dependencies = TRUE)
library("tidyr")
library("rlang")
library("dbscan")
datasetBugId <- read.csv(file="C:/Users/Charles/Desktop/Mestrado USP/Dissertação e Projeto/Experimentos/Experimentos - Discovering Bug Patterns In JS/DataSet/dataset_bugid_original_with_header.csv", header=TRUE, sep=",")
data("multishapes", package = "factoextra")
db <- datasetBugId[10:632]
library("dbscan")
res.db <- dbscan::dbscan(db, eps=0.30, minPts = 5)
# Obter os clusters
datasetBugId$Cluster <- res.db$cluster
datasetBugId$Qtd = 1;
library("rlang")
install.packages('tidyr', dependencies = TRUE)
library("rlang")
install.packages('rlang', dependencies = TRUE)
library("rlang")
version
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
updateR()
version
version
install.packages("microbenchmark")
install.packages("microbenchmark")
install.packages("microbenchmarkCore")
version
library(microbenchmark)
install.packages("microbenchmark", dependencies = TRUE)
library(microbenchmark)
library("rlang")
library(rlang)
install.packages("rlang")
library(microbenchmark)
library("ggplot2")
library("ggplot")
install.packages("rlang")
library(microbenchmark)
install.packages("rlang")
install.packages("rlang")
library(microbenchmark)
library(microbenchmark)
install.packages("microbenchmarkCore")
setwd("G:/Mestrado/Meus experimentos/Meu GitHub/ExperimentsPapers/DescobrindoPadroesdeBugJS/CodeR/evaluation")
# ===========
# Obter todos os conjuntos básicos de mudança
# ===========
# Leitura de CSV
# CSV com todos os Reparos classificados pelos Hanan, com os seus repectivos BCTs
conjuntosBCTs <- read.csv(file="original dataset/tablecct.csv", header=TRUE, sep=";")
library(stringr)
quebraBcts <- as.data.frame(str_split(conjuntosBCTs$Signature, "<br>", simplify = TRUE))
# Renomear as colunas
colnames(quebraBcts) <- c("bct1", "bct2", "bct3", "bct4")
quebraBcts$IdCCT <- conjuntosBCTs$ID
quebraBcts$Avg.Modified.Statements <- conjuntosBCTs$Avg.Modified.Statements
quebraBcts$CountBCTs <- conjuntosBCTs$BCTs
languageconstruct <- read.csv(file="original dataset/language_construct_database.csv",
header=TRUE, sep=";")
names(languageconstruct)[1] <- "IDCommit"
datasetLabelReparoCommit <- read.csv(file="original dataset/oracle.csv",
header=TRUE, sep=";")
names(datasetLabelReparoCommit)
library(dplyr)
datasetOracleCompleted <- (languageconstruct %>%
inner_join(datasetLabelReparoCommit, by = c("IDCommit" = "IDCommit")))
View(datasetOracleCompleted)
setwd("G:/Mestrado/Meus experimentos/Meu GitHub/ExperimentsPapers/DescobrindoPadroesdeBugJS/CodeR/evaluation")
languageconstruct <- read.csv(file="original dataset/language_construct_database.csv",
header=TRUE, sep=";")
names(languageconstruct)[1] <- "IDCommit"
datasetLabelReparoCommit <- read.csv(file="original dataset/oracle.csv",
header=TRUE, sep=";")
names(datasetLabelReparoCommit)
library(dplyr)
datasetOracleCompleted <- (languageconstruct %>%
inner_join(datasetLabelReparoCommit, by = c("IDCommit" = "IDCommit")))
View(datasetOracleCompleted)
View(languageconstruct)
View(datasetLabelReparoCommit)
datasetOracleCompleted <- (datasetLabelReparoCommit  %>%
inner_join(languageconstruct, by = c("IDCommit" = "IDCommit")))
View(datasetOracleCompleted)
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/result_language_construct_DBScan_With_Instances.csv",
header=TRUE, sep=";")
View(resultlanguageconstructWithDBScan)
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/result_language_construct_DBScan_With_Instances.csv",
header=FALSE, sep=";")
View(resultlanguageconstructWithDBScan)
names(resultlanguageconstructWithDBScan) <- c("Cluster", "Instances (IDCommit)")
library(stringr)
BCTsInCluster <- str_split_fixed(resultlanguageconstructWithDBScan$Cluster, "}:", 2)
BCTsInCluster <- resultlanguageconstructWithDBScan %>%
separate(Cluster, c("v1", "v2"), "}:")
BCTsInCluster <- strsplit(resultlanguageconstructWithDBScan$Cluster, "}:", 2, fixed=TRUE)
BCTsInCluster <- strsplit(resultlanguageconstructWithDBScan$Cluster, ''}:'', 2, fixed=TRUE)
BCTsInCluster <- strsplit(resultlanguageconstructWithDBScan$Cluster, '}:', 2, fixed=TRUE)
BCTsInCluster <- strsplit(resultlanguageconstructWithDBScan$Cluster, "}:", 2, fixed=TRUE)
BCTsInCluster <- strsplit(resultlanguageconstructWithDBScan$Cluster, "}:", 2)
BCTsInCluster <- strsplit(as.character(resultlanguageconstructWithDBScan$Cluster), "}:", 2)
View(BCTsInCluster)
BCTsInCluster <- resultlanguageconstructWithDBScan %>%
separate(as.character(Cluster), c("v1", "v2"), "}:")
View(BCTsInCluster)
resultlanguageconstructWithDBScan %>%
separate(as.character(Cluster), c("v1", "v2"), "}:")
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal",
header=TRUE, sep=";")
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal.CSV",
header=TRUE, sep=";")
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal.csv",
header=TRUE, sep=";")
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal.csv",
header=TRUE, sep=";")
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal.csv",
header=TRUE, sep=";")
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal.csv",
header=FALSE, sep=";")
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal.csv",
header=FALSE, sep=";")
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal.csv",
header=FALSE, sep=";")
View(resultlanguageconstructWithDBScan)
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal.csv",
header=TRUE, sep=";")
View(resultlanguageconstructWithDBScan)
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning-Ideal.csv",
header=TRUE, sep=";")
View(resultlanguageconstructWithDBScan)
BCTsInCluster <- strsplit(as.character(resultlanguageconstructWithDBScan$BCTs), "}:", resultlanguageconstructWithDBScan$BasicChanges)
View(BCTsInCluster)
max(resultlanguageconstructWithDBScan$BasicChanges)
BCTsInCluster <- strsplit(as.character(resultlanguageconstructWithDBScan$BCTs), "}:", max(resultlanguageconstructWithDBScan$BasicChanges))
BCTsInCluster <- strsplit(as.character(resultlanguageconstructWithDBScan$BCTs), ',', max(resultlanguageconstructWithDBScan$BasicChanges))
View(BCTsInCluster)
BCTsInCluster <- strsplit(as.character(resultlanguageconstructWithDBScan[1]$BCTs), ',', max(resultlanguageconstructWithDBScan$BasicChanges))
resultlanguageconstructWithDBScan[1]$BCTs
resultlanguageconstructWithDBScan[0]$BCTs
resultlanguageconstructWithDBScan(0)$BCTs
resultlanguageconstructWithDBScan[0,]
resultlanguageconstructWithDBScan[,0]
resultlanguageconstructWithDBScan[1,]
BCTsInCluster <- strsplit(as.character(resultlanguageconstructWithDBScan[1,]$BCTs), ',', max(resultlanguageconstructWithDBScan$BasicChanges))
View(BCTsInCluster)
View(BCTsInCluster)
View(BCTsInCluster)
?strsplit
BCTsInCluster <- strsplit(as.character(resultlanguageconstructWithDBScan[1,]$BCTs), ',')
View(BCTsInCluster)
BCTsInCluster <- unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$BCTs), ','))
View(BCTsInCluster)
View(resultlanguageconstructWithDBScan)
View(datasetOracleCompleted)
datasetOracleCompleted["BCT1"]
datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344]["BCT1"]
datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344]
datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,]
datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,]["BCT1"]
datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,][("BCT" + 1)]
datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,][paste("BCT", 1)]
paste("BCT", 1)
datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,][paste("BCT", 1, sep="")]
dim(datasetOracleCompleted)[1]
datasetOracleCompleted[1,]
resultlanguageconstructWithDBScan[1,]
dim(resultlanguageconstructWithDBScan)[1]
resultlanguageconstructWithDBScan[1,]$ContainsInstances
unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ','))
as.data.frame(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[i,]$ContainsInstances), ',')))
as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[i,]$ContainsInstances), ',')))
as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))
as.data.frame(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))
as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))
dim(as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ','))))
dim(as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ','))))[0]
dim(as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ','))))
as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))[0]
as.data.frame(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))[0]
as.data.frame(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))[0,]
as.data.frame(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))[,1]
as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))[0]
as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))[1]
instancesIdCommits <-
as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))
instancesIdCommits
dim(instancesIdCommits)
dim(resultlanguageconstructWithDBScan)[1]
resultlanguageconstructWithDBScan <-
read.csv(file="dataset job/BugAID/resultado_language_construct_to_tuning.csv",
header=TRUE, sep=";")
View(resultlanguageconstructWithDBScan)
instancesIdCommits <-
as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$ContainsInstances), ',')))
View(instancesIdCommits)
datasetOracleCompleted[datasetOracleCompleted$IDCommit == instancesIdCommits[1],]
instancesIdCommits[1]
as.integer(instancesIdCommits[1])
datasetOracleCompleted[datasetOracleCompleted$IDCommit == as.integer(instancesIdCommits[1]),]
View(datasetOracleCompleted)
View(datasetOracleCompleted)
datasetOracleCompleted[datasetOracleCompleted$IDCommit == as.integer(instancesIdCommits[1]),]
datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,]
datasetOracleCompleted[datasetOracleCompleted$IDCommit == (as.integer(instancesIdCommits[1])),]
(as.integer(instancesIdCommits[1]))
datasetOracleCompleted[datasetOracleCompleted$IDCommit == 2272,]
size(datasetOracleCompleted[datasetOracleCompleted$IDCommit == 2272,])
dim(datasetOracleCompleted[datasetOracleCompleted$IDCommit == 2272,])
dim(datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,])
ncol(datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,])
nrow(datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,])
nrow(resultlanguageconstructWithDBScan)
dim(instancesIdCommits)
View(datasetOracleCompleted)
languageconstruct[languageconstruct$IDCommit == 2272,]
View(datasetLabelReparoCommit)
View(datasetOracleCompleted)
datasetOracleCompleted[,10]
datasetOracleCompleted[,ncol(datasetOracleCompleted) - 10]
datasetOracleCompleted[c( 10, ncol(datasetOracleCompleted))]
datasetOracleCompleted[10, ncol(datasetOracleCompleted)]
datasetOracleCompleted[, ncol(datasetOracleCompleted)]
datasetOracleCompleted[, 10: ncol(datasetOracleCompleted)]
rowOracle <- datasetOracleCompleted[datasetOracleCompleted$IDCommit == 344,]
rowOracle[, 10: ncol(rowOracle)]
ncol(rowOracle[, 11: ncol(rowOracle)])
ncolRowOracle[paste("BCT", 1, sep="")]
ncolRowOracle
ncolRowOracle <- integer()
ncolRowOracle <- ncol(rowOracle[, 11: ncol(rowOracle)])
View(rowOracle)
rowOracle[paste("BCT", 1, sep="")]
View(resultlanguageconstructWithDBScan)
rowOracle[paste("BCT", 1, sep="")]
View(rowOracle)
iBCTs <-
as.array(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$BCTs), ',')))
iBCTs <-
as.data.frame(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$BCTs), ',')))
View(iBCTs)
iBCTs <- data.frame()
matrixconfusion <- data.frame(
IDRepair=integer(),
IDCommit=integer(),
ClusterID=integer(),
ProjectID = character(),
BCTs = character(),
BasicChanges=integer(),
stringsAsFactors=FALSE
)
matrixconfusion$IDRepair <- rowOracle$IDRepair
View(matrixconfusion)
matrixconfusion[paste("BCT", 1, sep="")] <- 1
matrixconfusion$`paste("BCT", 1, sep="")` <- 1
matrixconfusion["das"] <- 1
matrixconfusion
iBCTs <-
as.data.frame(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$BCTs), ',')))
dim(instancesIdCommits)
rowOracle
ncolRowOracle
iBCTs
iBCTs
iBCTs <-
as.data.frame(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$BCTs), ',')))
iBCTs
iBCTs <-
unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$BCTs), ','))
as.data.frame(iBCTs)
iBCTs <- data.frame()
iBCTs <-
as.data.frame(unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1,]$BCTs), ',')))
View(iBCTs)
nrow(iBCTs)
ncolRowOracle
iBCTs[1,]
iBCTs[1]
iBCTs[,1]
iBCTs[1,]
iBCTs[1,] == "RESERVED:CONDITION:INSERTED:global:falsey:1.0"
rowOracle[paste("BCT", 1, sep="")]
iBCTs[1,] == rowOracle[paste("BCT", 1, sep="")]
as.character(iBCTs[1,]) == as.character(rowOracle[paste("BCT", 1, sep="")])
as.character(iBCTs[1,])
as.character(rowOracle[paste("BCT", 1, sep="")])
rowOracle[paste("BCT", 1, sep="")]
rowOracle[paste("BCT", 2, sep="")]
as.data.frame(rowOracle[paste("BCT", 1, sep="")])
as.data.frame(iBCTs[1,])
as.data.frame(rowOracle[paste("BCT", 1, sep="")]) == as.data.frame(iBCTs[1,])
as.character(as.data.frame(rowOracle[paste("BCT", 1, sep="")])) == as.character(as.data.frame(iBCTs[1,]))
as.character(as.data.frame(iBCTs[1,]))
as.character(as.data.frame(rowOracle[paste("BCT", 1, sep="")]))
as.character(as.data.frame(rowOracle[paste("BCT", 1, sep="")])) == as.character(as.data.frame(iBCTs[1,]))
typeof(as.character(as.data.frame(rowOracle[paste("BCT", 1, sep="")])))
typeof(as.character(as.data.frame(iBCTs[1,])))
as.character(as.data.frame(iBCTs[1,]))
as.character(as.data.frame(rowOracle[paste("BCT", 1, sep="")]))
as.data.frame(iBCTs[1,])
as.data.frame(rowOracle[paste("BCT", 1, sep="")])
as.data.frame(rowOracle[paste("BCT", 1, sep="")]).toString()
as.data.frame(rowOracle[paste("BCT", 1, sep="")])
as.data.frame.character(as.data.frame(iBCTs[1,]))
typeof(as.data.frame(iBCTs[1,]))
typeof(rowOracle[paste("BCT", 1, sep="")])
rowOracle[paste("BCT", 1, sep="")] == as.data.frame(iBCTs[1,])
rowOracle[paste("BCT", 1, sep="")] %in% as.data.frame(iBCTs[1,])
length(rowOracle[paste("BCT", 1, sep="")])
length(as.data.frame(iBCTs[1,]))
all.equal(as.data.frame(iBCTs[1,]), rowOracle[paste("BCT", 1, sep="")])
all.equal(c(as.data.frame(iBCTs[1,])), c(rowOracle[paste("BCT", 1, sep="")]))
c(as.data.frame(iBCTs[1,])) == c(rowOracle[paste("BCT", 1, sep="")])
c(as.data.frame(iBCTs[1,])) %in% c(rowOracle[paste("BCT", 1, sep="")])
c(as.data.frame(iBCTs[1,]))
c(rowOracle[paste("BCT", 1, sep="")])
as.character(c(rowOracle[paste("BCT", 1, sep="")]))
rowOracle[paste("BCT", 1, sep="")]
as.character(c(rowOracle[paste("BCT", 1, sep="")]))
c(as.data.frame(iBCTs[1,]))
teste <- c(as.data.frame(iBCTs[1,]))
teste
teste <- as.data.frame(iBCTs[1,])
teste
as.cara
as.character(teste)
teste
as.character(c(rowOracle[paste("BCT", 1, sep="")]))
rowOracle[paste("BCT", 1, sep="")]
rowOracle[paste("BCT", 1, sep="")] + ""
rowOracle[paste("BCT", 1, sep="")]
rowOracle[paste("BCT", 1, sep="")][0]
rowOracle[paste("BCT", 1, sep="")](0)
rowOracle[paste("BCT", 1, sep="")]
rowOracle[paste("BCT", 1, sep="")][1]
typeof(rowOracle[paste("BCT", 1, sep="")][1])
teste %in% as.data.frame(iBCTs[1,])
teste
teste
??compare
iBCTs[b,]
iBCTs[1,]
teste2 <- iBCTs[1,]
teste2
typeof(teste2)
iBCTs(iBCTs[1,])
iBCTs[iBCTs == iBCTs[1,]]
iBCTs
iBCTs[iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))` == iBCTs[1,]]
teste2
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[1]
teste2 <- iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[1]
teste2
teste$`iBCTs[1, ]`
typeof(teste$`iBCTs[1, ]`)
teste2 == teste$`iBCTs[1, ]`
typeof(teste)
teste$`iBCTs[1, ]`
iBCTs[iBTCs == teste$`iBCTs[1, ]`]
iBCTs[iBTCs == teste$`iBCTs[1, ]`,]
iBCTs[,iBTCs == teste$`iBCTs[1, ]`]
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[1]
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[0]
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[2]
typeof(iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[0])
typeof(iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`)
typeof(iBCTs)
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[1]
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[0]
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[2]
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[3]
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[3][1]
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[3][0]
iBCTs$`unlist(strsplit(as.character(resultlanguageconstructWithDBScan[1, ]$BCTs), ","))`[2]
iBCTs[1,]
iBCTs[1,0]
iBCTs[1,1]
as.character(iBCTs[1,1])
as.character(iBCTs[1,])
rowOracle[paste("BCT", x, sep=""),]
rowOracle[paste("BCT", x, sep="")]
rowOracle[paste("BCT", 1, sep=""),1]
rowOracle[paste("BCT", 1, sep=""),]
rowOracle[paste("BCT", 1, sep="")]
rowOracle[,paste("BCT", 1, sep="")]
rowOracle[1,paste("BCT", 1, sep="")]
as.character(rowOracle[1,paste("BCT", 1, sep="")])
as.character(rowOracle[,paste("BCT", 1, sep="")])
as.character(rowOracle[,paste("BCT", 1, sep="")]) == as.character(iBCTs[1,1])
as.character(rowOracle[,paste("BCT", 1, sep="")])+"0" == as.character(iBCTs[1,1])
paste(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0") == as.character(iBCTs[1,1])
paste(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0")
as.character(iBCTs[1,1])
paste(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0", "")
as.character(rowOracle[,paste("BCT", 1, sep="")])
paste0(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0", "")
paste0(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0") == as.character(iBCTs[1,1])
paste0(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0")
as.character(iBCTs[1,1])
trimws(as.character(iBCTs[1,1]))
trimws(paste0(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0"))
trimws(paste0(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0")) == trimws(as.character(iBCTs[1,1]))
trimws(paste0(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0")) == trimws(as.character(iBCTs[1,]))
trimws(as.character(iBCTs[1,]))
trimws(paste0(as.character(rowOracle[,paste("BCT", 2, sep="")]), ".0"))
trimws(paste0(as.character(rowOracle[,paste("BCT", 3, sep="")]), ".0"))
trimws(as.character(iBCTs[2,]))
trimws(as.character(iBCTs[3,]))
trimws(as.character(iBCTs[4,]))
trimws(as.character(iBCTs[5,]))
nrow(iBCTs)
ncolRowOracle
trimws(paste0(as.character(rowOracle[,paste("BCT", 4, sep="")]), ".0"))
trimws(paste0(as.character(rowOracle[,paste("BCT", 5, sep="")]), ".0"))
trimws(paste0(as.character(rowOracle[,paste("BCT", 6, sep="")]), ".0"))
rowOracle
instancesIdCommits
instancesIdCommits[2]
rowOracle <- datasetOracleCompleted[datasetOracleCompleted$IDCommit == (as.integer(instancesIdCommits[2])),]
nrow(rowOracle)
rowOracle <- datasetOracleCompleted[datasetOracleCompleted$IDCommit == (as.integer(instancesIdCommits[3])),]
nrow(rowOracle)
dim(instancesIdCommits)
rowOracle <- datasetOracleCompleted[datasetOracleCompleted$IDCommit == (as.integer(instancesIdCommits[4])),]
nrow(rowOracle)
rowOracle <- datasetOracleCompleted[datasetOracleCompleted$IDCommit == (as.integer(instancesIdCommits[5])),]
nrow(rowOracle)
rowOracle <- datasetOracleCompleted[datasetOracleCompleted$IDCommit == (as.integer(instancesIdCommits[6])),]
nrow(rowOracle)
ncolRowOracle <- ncol(rowOracle[, 11: ncol(rowOracle)])
trimws(paste0(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0")) ==
trimws(as.character(iBCTs[1,])))
trimws(paste0(as.character(rowOracle[,paste("BCT", 1, sep="")]), ".0")) ==
trimws(as.character(iBCTs[1,])))
